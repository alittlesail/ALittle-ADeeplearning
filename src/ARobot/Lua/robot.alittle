
register namespace carp;

public class CarpRobotDim
{
    public fun Count() : int { }
    public fun Get(int index) : int { }
}

public class CarpRobotComputationGraph
{
    public fun Clear() {}
    public fun Invalidate() {}
    public fun Backward() {}
    public fun AsScalar(int index) : double {}
    public fun AsVectorAndArgmax(int index) : int {}
    public fun AsVectorAndMaxValue(int index) : double {}
    public fun AsVectorAndGetValue(int expr_index, int index) : double {}
    public fun GetDim(int index) : CarpRobotDim {}

    public fun Negate(int index) : int {}
    public fun Addition(int index1, int index2) : int {}
    public fun Plus(int index, double value) : int {}
    public fun Subtraction(int index1, int index2) : int {}
    public fun Minus(int index, double value) : int {}
    public fun Multiplication(int index1, int index2) : int {}
    public fun Multiply(int index, double value) : int {}
    public fun Division(int index1, int index2) : int {}
    public fun Divide(int index, double value) : int {}

    public fun Square(int index) : int { }
    public fun PickNegLogSoftmax(int index, carp.CarpRobotLabel v) : int { }
    public fun BinaryLogLoss(int index) : int { }

    public fun Sigmoid(int index) : int { }
    public fun Rectify(int index) : int { }
    public fun Softmax(int index) : int { }
    public fun LogSoftmax(int index) : int { }

    public fun Dropout(int index, double rate, carp.CarpRobotLabel training) : int { }
    public fun Conv2D(int index, int kernel_expr, int stride_width, int stride_height, bool padding_type) : int { }
    public fun MaxPooling2D(int index, int kernel_width, int kernel_height, int stride_width, int stride_height, bool padding_type) : int { }
    public fun Reshape(int index, int dim_0, int dim_1, int dim_2) : int { }
    public fun PickElement(int index, carp.CarpRobotLabel value, int dim) : int { }
    public fun MeanElements(int index, int dim) : int { }
    public fun Concatenate(int index, int expr_0, int expr_1, int expr_2) : int { }
}

public class CarpRobotParameterCollection
{
    public fun Load(string file_path) { }
    public fun Save(string file_path) { }
}

public class CarpRobotAdamTrainer
{
    public ctor(CarpRobotParameterCollection model, double learning_rate, double beta_1, double beta_2, double eps) {}
    public fun Update() { }
}

public class CarpRobotInput
{
    public ctor(int dim_0, int dim_1, int dim_2) { }

    public fun Build(CarpRobotComputationGraph graph) { }
    public fun Update(int offset, List<double> data) { }
    public fun Calc(CarpRobotComputationGraph graph) : int { }
}

public class CarpRobotLabel
{
    public fun Update(int label) { }
}

public class CarpRobotLinear
{
    public ctor(CarpRobotParameterCollection model, int input_dim, int output_dim) { }

    public fun Build(CarpRobotComputationGraph graph) { }
    public fun Copy(CarpRobotLinear value) { }
    public fun Calc(CarpRobotComputationGraph graph, int input) : int { }
}

public class CarpRobotConv2D
{
    public ctor(CarpRobotParameterCollection model
               , int input_dim, int output_dim, int kernel_width, int kernel_height
               , int stride_width, int stride_height, bool padding_type) { }

    public fun Build(CarpRobotComputationGraph graph) { }
    public fun Copy(CarpRobotConv2D value) { }
    public fun Calc(CarpRobotComputationGraph graph, int input) : int { }
}

public class CarpRobotLstm
{
    public ctor(CarpRobotParameterCollection model, int num_lstm, int input_dim, int hidden_dim, bool ln_lstm) { }

    public fun Build(CarpRobotComputationGraph graph, bool update) { }
    public fun SetDropoutRate(double value) { }
    public fun SetDropoutRateH(double value) { }
    public fun AddInput(CarpRobotComputationGraph graph, int input_index) : int { }
}

public class CarpRobotMnist
{
    public fun Load(string root_path) : bool { }
    public fun GetImage(int index, CarpRobotInput input) : bool { }
    public fun GetLabel(int index) : int { }
    public fun GetCount() : int { }
}

public class CarpRobotMFCC
{
    // wav_path 文件路径
    // param_count取MFCC前多少个参数
    public fun Load(string wav_path, int param_count) : bool { }
    // 将参数填充到input
    public fun GetMFCC(int index, CarpRobotInput input) : bool { }
    // 获取参数个数
    public fun GetCount() : int { }
}

public class CarpRobotSurface
{
    public fun SetImage(int addrtess, int fixed_width, int fixed_height) : bool { }
    public fun GetImage(CarpRobotInput input) { }
}

public class CarpRobotSumTree
{
    public ctor(int memory_capacity) { }
    public fun SaveMemory(List<double> state, List<double> next_state, int action, double reward, double loss) : bool { }
    public fun SelectMemory(int count) : List<int> { }
    public fun GetState(int index, CarpRobotInput input) { }
    public fun GetNextState(int index, CarpRobotInput input) { }
    public fun GetReward(int index, CarpRobotInput input) : double { }
    public fun GetAction(int index, CarpRobotLabel label) : int { }
}