
namespace ADeeplearning;

public class ARobotSession
{
    protected carp.CarpRobotParameterCollection _model;
    protected carp.CarpRobotComputationGraph _graph;
    protected carp.CarpRobotAdamTrainer _trainer;

    private string _file_path;

    public ctor()
    {
        this._model = new carp.CarpRobotParameterCollection();
        this._graph = new carp.CarpRobotComputationGraph();
        this._trainer = new carp.CarpRobotAdamTrainer(this._model, 0.001, 0.9, 0.999, 0.00000001);
    }

    public fun Reset([Nullable]bool clear)
    {
        if (clear)
        {
            this._graph.Clear();
            return;
        }

        this._graph.Invalidate();
    }

    public fun Train()
    {
        this._graph.Backward();
        this._trainer.Update();
    }

    public fun Load(string file_path)
    {
        if (file_path == null) return;
        this._model.Load(file_path);
        this._file_path = file_path;
    }
    public fun Save(string file_path)
    {
        if (file_path == null) file_path = this._file_path;
        if (file_path == null) return;
        this._model.Save(file_path);
    }

    public fun CreateInput(List<int> dim_list) : ARobotInput
    {
        if (dim_list[1] == null) dim_list[1] = 0;
        if (dim_list[2] == null) dim_list[2] = 0;
        if (dim_list[3] == null) dim_list[3] = 0;
        var input = new carp.CarpRobotInput(dim_list[1], dim_list[2], dim_list[3]);
        input.Build(this._graph);
        return new ARobotInput(this._graph, input);
    }

    public fun CreateLabel() : ARobotLabel
    {
        var label = new carp.CarpRobotLabel();
        return new ARobotLabel(this._graph, label);
    }

    public fun CreateLinear(int input_dim, int output_dim) : ARobotLinear
    {
        var linear = new carp.CarpRobotLinear(this._model, input_dim, output_dim);
        linear.Build(this._graph);
        return new ARobotLinear(this._graph, linear);
    }

    public fun CreateConv2D(int input_dim, int output_dim, int kernel_width, int kernel_height
                           , [Nullable] int stride_width, [Nullable] int stride_height, [Nullable] bool padding_type) : ARobotConv2D
    {
        if (stride_width == null) stride_width = 1;
        if (stride_height == null) stride_height = 1;
        if (padding_type == null) padding_type = true;

        var conv2d = new carp.CarpRobotConv2D(this._model, input_dim, output_dim
                     , kernel_width, kernel_height, stride_width, stride_height, padding_type);
        conv2d.Build(this._graph);
        return new ARobotConv2D(this._graph, conv2d);
    }

    // 因为lstm是动态的，所以必须每次清理graph，然后重新build
    public fun CreateLstm(int num_lstm, int input_dim, int hidden_dim, bool ln_lstm) : ARobotLstm
    {
        var lstm = new carp.CarpRobotLstm(this._model, num_lstm, input_dim, hidden_dim, ln_lstm);
        return new ARobotLstm(this._graph, lstm);
    }

    public fun CreateBiLstm(int num_lstm, int input_dim, int hidden_dim, bool ln_lstm) : ARobotBiLstm
    {
        var l2r_lstm = new carp.CarpRobotLstm(this._model, num_lstm, input_dim, ALittle.Math_Floor(hidden_dim / 2), ln_lstm);
        var r2l_lstm = new carp.CarpRobotLstm(this._model, num_lstm, input_dim, ALittle.Math_Floor(hidden_dim / 2), ln_lstm);
        return new ARobotBiLstm(this._graph, l2r_lstm, r2l_lstm);
    }
}