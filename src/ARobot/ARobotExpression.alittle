
namespace ADeeplearning;


public class ARobotExpression
{
    protected carp.CarpRobotComputationGraph _graph;
    protected int _index;

    // 创建全连接
    protected carp.CarpRobotLinear _linear;

    public ctor(carp.CarpRobotComputationGraph graph, int index) 
    {
        this._graph = graph;
        this._index = index;
    }

    public fun AsScalar() : double { return this._graph.AsScalar(this._index); }
    public fun AsVectorAndArgmax() : int { return this._graph.AsVectorAndArgmax(this._index); }
    public fun AsVectorAndMaxValue() : double { return this._graph.AsVectorAndMaxValue(this._index); }

    public fun Negate() : ARobotExpression { return new ARobotExpression(this._graph, this._graph.Negate(this._index)); }
    public fun Addition(ARobotExpression value) : ARobotExpression { return new ARobotExpression(this._graph, this._graph.Addition(this._index, value._index)); }
    public fun Plus(double value) : ARobotExpression { return new ARobotExpression(this._graph, this._graph.Plus(this._index, value)); }
    public fun Subtraction(ARobotExpression value) : ARobotExpression { return new ARobotExpression(this._graph, this._graph.Subtraction(this._index, value._index)); }
    public fun Minus(double value) : ARobotExpression { return new ARobotExpression(this._graph, this._graph.Minus(this._index, value)); }
    public fun Multiplication(ARobotExpression value) : ARobotExpression { return new ARobotExpression(this._graph, this._graph.Multiplication(this._index, value._index)); }
    public fun Multiply(double value) : ARobotExpression { return new ARobotExpression(this._graph, this._graph.Multiply(this._index, value)); }
    public fun Division(ARobotExpression value) : ARobotExpression { return new ARobotExpression(this._graph, this._graph.Division(this._index, value._index)); }
    public fun Divide(double value) : ARobotExpression { return new ARobotExpression(this._graph, this._graph.Divide(this._index, value)); }

    public fun Square() : ARobotExpression { return new ARobotExpression(this._graph, this._graph.Square(this._index)); }
    public fun PickNegLogSoftmax(ARobotLabel label) : ARobotExpression { return new ARobotExpression(this._graph, this._graph.PickNegLogSoftmax(this._index, label.GetLabel())); }
    public fun BinaryLogLoss() : ARobotExpression { return new ARobotExpression(this._graph, this._graph.BinaryLogLoss(this._index)); }

    public fun Sigmoid() : ARobotExpression { return new ARobotExpression(this._graph, this._graph.Sigmoid(this._index)); }
    public fun Rectify() : ARobotExpression { return new ARobotExpression(this._graph, this._graph.Rectify(this._index)); }
    public fun Softmax() : ARobotExpression { return new ARobotExpression(this._graph, this._graph.Softmax(this._index)); }
    public fun LogSoftmax() : ARobotExpression { return new ARobotExpression(this._graph, this._graph.LogSoftmax(this._index)); }

    public fun Dropout(double rate, ARobotLabel training) : ARobotExpression 
    { return new ARobotExpression(this._graph, this._graph.Dropout(this._index, rate, training.GetLabel())); }
	public fun Conv2D(ARobotExpression kernel, int stride_width, int stride_height, bool padding_type) : ARobotExpression 
    { return new ARobotExpression(this._graph, this._graph.Conv2D(this._index, kernel._index, stride_width, stride_height, padding_type)); }
    public fun MaxPooling2D(int kernel_width, int kernel_height, [Nullable]int stride_width, [Nullable]int stride_height, [Nullable] bool padding_type) : ARobotExpression 
    {
        if (stride_width == null) stride_width = 1;
        if (stride_height == null) stride_height = 1;
        if (padding_type == null) padding_type = true;
        return new ARobotExpression(this._graph, this._graph.MaxPooling2D(this._index, kernel_width, kernel_height, stride_width, stride_height, padding_type));
    }
    public fun Reshape(List<int> dim_list) : ARobotExpression
    {
        if (dim_list[1] == null) dim_list[1] = 0;
        if (dim_list[2] == null) dim_list[2] = 0;
        if (dim_list[3] == null) dim_list[3] = 0;
        return new ARobotExpression(this._graph, this._graph.Reshape(this._index, dim_list[1], dim_list[2], dim_list[3]));
    }
    public fun PickElement(ARobotLabel label, int dim) : ARobotExpression { return new ARobotExpression(this._graph, this._graph.PickElement(this._index, label.GetLabel(), dim)); }
    public fun MeanElements(int dim) : ARobotExpression { return new ARobotExpression(this._graph, this._graph.MeanElements(this._index, dim)); }
}
