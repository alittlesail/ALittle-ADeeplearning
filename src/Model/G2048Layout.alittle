
namespace ADeeplearning;

public class G2048TrainLayout : CommonTrainLayout
{
    private deeplearning.Deeplearning2048Model _model;

    public get model() : deeplearning.DeeplearningModel
    {
        if (this._model == null)
        {
            this._model = new deeplearning.Deeplearning2048Model(4, 4, 2000);
            this._model_path = g_ModuleBasePath.."Other/g2048.model";
        }
        return this._model;
    }
}

protected class G2048Layout : ALittle.DisplayLayout
{
	private ADeeplearning.G2048TrainLayout _train;
    private deeplearning.Deeplearning2048Model _model;

    private string _model_path;

    public fun TCtor()
    {
        this._train.AddEventListener(this, this.HandleTrainChanged);

        this._model_path = g_ModuleBasePath.."Other/g2048.model";
        this._model = new deeplearning.Deeplearning2048Model(4, 4, 2000);
        this._model.Load(this._model_path);
        this._model.Restart2048();
        this.UpdateText();
    }

    private fun HandleTrainChanged(ALittle.UIChangedEvent event)
    {
        this._model.Load(this._model_path);
    }

    private fun HandleCalcAIClick(ALittle.UIChangedEvent event)
    {
        this._model.Play2048(this._model.PlayAI());
        this.UpdateText();
    }

    private fun HandleCalcLeftClick(ALittle.UIClickEvent event)
    {
        this._model.Play2048(2);
        this.UpdateText();
    }

    private fun HandleCalcRightClick(ALittle.UIClickEvent event)
    {
        this._model.Play2048(1);
        this.UpdateText();
    }

    private fun HandleCalcUpClick(ALittle.UIClickEvent event)
    {
        this._model.Play2048(3);
        this.UpdateText();
    }

    private fun HandleCalcDownClick(ALittle.UIClickEvent event)
    {
        this._model.Play2048(0);
        this.UpdateText();
    }

    private fun HandleRestartClick(ALittle.UIClickEvent event)
    {
        this._model.Restart2048();
        this.UpdateText();
    }

    private fun UpdateText()
    {
        for (var row = 0; row < 4; 1)
        {
            for (var col = 0; col < 4; 1)
            {
                var text = cast<Map<string, ALittle.Text>>(this)["_2048_"..row.."_"..col];
                var value = this._model.Get2048(row, col);
                text.text = value;
                if (value == 0) text.text = "-";
            }
        }
    }
}
