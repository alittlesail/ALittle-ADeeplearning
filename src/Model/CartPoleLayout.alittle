
namespace ADeeplearning;

enum CartPoleAction
{
    LEFT = 0;	// 向左
    RIGHT = 1;	// 向右
}

protected class CartPoleLayout : ALittle.DisplayLayout
{
    private deeplearning.DeeplearningDQNModel _model;

    private string _model_path;
    private bool _loaded = false;

    private ALittle.Quad _cart_pole_cart;
    private ALittle.Quad _cart_pole_pole;
    private ALittle.Quad _cart_pole_line;
    private ALittle.DisplayLayout _cart_pole_container;
    private ALittle.TextButton _start_button;
    private ALittle.DisplayObject _self_play;

    private ALittle.LoopFrame _loop_frame;

    private double _gravity = 9.8;		// 重力加速度
    private double _masscart = 1.0;		// 车的质量
    private double _masspole = 0.5;		// 杆的质量
    private double _total_mass = 0;		// 总质量
    private double _pole_length = 5;	// 杆重心的位置
    private double _polemass_length = 0;	// 杆重心
    private double _force_mag = 10.0;

    private int _action = 0;	// 0 表示向左，1 表示向右
    private double _cart_x = 0;	// 小车的位置
    private double _cart_x_dot = 0;	
    private double _pole_theta = 0;		// 杆的角度
    private double _pole_theta_dot = 0;

	private double _theta_threshold_radians = 1.570796325;
	private double _x_threshold = 5;

    public fun TCtor()
    {
        this._model_path = g_ModuleBasePath.."Other/cartpole.model";
        this._model = new deeplearning.DeeplearningDQNModel(4, 2, 100, 2000);

        // 计算总质量
        this._total_mass = this._masscart + this._masspole;
        // 计算杆的重心
        this._polemass_length = this._masspole * this._polemass_length;
        // 初始化画面和数据
        this.GameInit(0);
    }

    private fun HandleStartGameClick(ALittle.UIClickEvent event)
    {
        if (!this._loaded)
        {
            this._model.Load(this._model_path);
            this._loaded = true;
        }

        this.GameInit(0);

        if (this._loop_frame != null)
            this._loop_frame.Stop();
        this._loop_frame = new ALittle.LoopFrame(bind(this.HandleFrame, this));
        this._loop_frame.Start();

        this._start_button.disabled = true;
    }

    private fun HandleStopGameClick(ALittle.UIClickEvent event)
    {
        if (this._loaded) this._model.Save(this._model_path);

        this.GameInit(0);

        if (this._loop_frame != null)
        {
            this._loop_frame.Stop();
            this._loop_frame = null;
        }

        this._start_button.disabled = false;
    }

    private fun GameInit(double angle)
    {
        this._cart_x = 0;
        this._cart_x_dot = 0;
        this._pole_theta = 0;
        this._pole_theta_dot = 0;
        this._action = CartPoleAction.LEFT;

        this._cart_pole_cart.x = this._cart_pole_container.width / 2 - this._cart_pole_cart.width / 2;
        this._cart_pole_pole.x = this._cart_pole_cart.x + this._cart_pole_cart.width / 2 - this._cart_pole_pole.width / 2;
        this._cart_pole_pole.angle = angle;
    }

    private fun HandleFrame(int frame_time)
    {
        var state = new List<double>();
        state[1] = this._cart_x;
        state[2] = this._cart_x_dot;
        state[3] = this._pole_theta;
        state[4] = this._pole_theta_dot;

        var action = this._action;
        if (this._self_play.selected)
        {
            if (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_LEFT] != null)
                action = CartPoleAction.LEFT;
            elseif (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_RIGHT] != null)
                action = CartPoleAction.RIGHT;
        }
        else
        {
            action = this._model.ChooseAction(state, 9);
        }

        var done = this.GameRun(action, frame_time);

        var next_state = new List<double>();
        next_state[1] = this._cart_x;
        next_state[2] = this._cart_x_dot;
        next_state[3] = this._pole_theta;
        next_state[4] = this._pole_theta_dot;

        if (done)
        {
            if (this._loop_frame != null)
            {
                this._loop_frame.Stop();
                this._loop_frame = null;
            }

            this.GameInit(0);

            if (this._loop_frame != null)
                this._loop_frame.Stop();
            this._loop_frame = new ALittle.LoopFrame(bind(this.HandleFrame, this));
            this._loop_frame.Start();

            this._start_button.disabled = false;
        }
        else
        {
            var r1 = (this._x_threshold - ALittle.Math_Abs(this._cart_x)) / this._x_threshold - 0.8;
            var r2 = (this._theta_threshold_radians - ALittle.Math_Abs(this._pole_theta)) / this._theta_threshold_radians - 0.5;
        	var reward = r1 + r2;

            this._model.SaveTransition(state, action, reward, next_state);
            this._model.Learn();
        }
    }

    // 输入操作，action为0表示不动，为1表示向左走，action为2表示向右走
    // 返回值，游戏是否结束
    private fun GameRun(int action, int frame_time) : bool
    {
        this._action = action;
        var x = this._cart_x;
        var x_dot = this._cart_x_dot;
        var theta = this._pole_theta;
        var theta_dot = this._pole_theta_dot;

        var force = this._force_mag;
        if (this._action != 1) force = -this._force_mag;
        var costheta = ALittle.Math_Cos(theta);
        var sintheta = ALittle.Math_Sin(theta);

        var temp = (force + this._polemass_length * theta_dot * theta_dot * sintheta) / this._total_mass;
        var thetaacc = (this._gravity * sintheta - costheta * temp) / (this._pole_length * (4.0 / 3.0 - this._masspole * costheta * costheta / this._total_mass));
        var xacc = temp - this._polemass_length * thetaacc * costheta / this._total_mass;

        var tau = frame_time / 1000;
        
        x = x + tau * x_dot;
        x_dot = x_dot + tau * xacc;
        theta = theta + tau * theta_dot;
        theta_dot = theta_dot + tau * thetaacc;

        var done = x < -this._x_threshold || x > this._x_threshold || theta < -this._theta_threshold_radians || theta > this._theta_threshold_radians;

        this._cart_x = x;
        this._cart_x_dot = x_dot;
        this._pole_theta = theta;
        this._pole_theta_dot = theta_dot;

        this.GameRender();

        return done;
    }

    // 更新界面
    private fun GameRender()
    {
        var real_x = this._cart_x * this._cart_pole_cart.width;
        this._cart_pole_cart.x = real_x + this._cart_pole_container.width / 2 - this._cart_pole_cart.width / 2;
        this._cart_pole_pole.x = real_x + this._cart_pole_container.width / 2 - this._cart_pole_pole.width / 2;
        this._cart_pole_pole.angle = this._pole_theta / 3.14159265 * 180;
    }
}
