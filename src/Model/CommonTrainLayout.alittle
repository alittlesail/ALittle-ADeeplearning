
namespace ADeeplearning;

public class CommonTrainLayout : ALittle.DisplayLayout
{
	private ALittle.Text _total_train_count_text;
	private ALittle.Text _cur_train_count_text;
	private ALittle.Text _cur_right_count_text;
	private ALittle.Text _train_round_text;
    private ALittle.Text _loss_average_text;

    private string _model_path;

	private AUIPlugin.AUIStatLayout _stat;
    
    private ALittle.LoopFrame _loop;
    private ALittle.DisplayObject _start_button;
    private ALittle.DisplayObject _stop_button;

    public fun TCtor()
    {
        this._start_button.disabled = false;
        this._stop_button.disabled = true;
    }

    private get model() : deeplearning.DeeplearningModel { return null; }

    private fun HandleStartClick(ALittle.UIClickEvent event)
    {
        if (this._loop != null) return;
        this._start_button.DelayDisable();
        this._stop_button.disabled = false;
    
        this._loop = new ALittle.LoopFrame(bind(this.UpdateFrame, this));
        A_WeakLoopSystem.AddUpdater(this._loop);

        this._total_train_count_text.text = 0;
        this._cur_train_count_text.text = 0;
        this._train_round_text.text = 0;
        this._cur_right_count_text.text = 0;

        this._stat.Init(1, ALittle.Math_Floor(this._stat.width), ALittle.Math_Floor(this._stat.height));
        this.model.Load(this._model_path);
        this.model.StartTraining();
    }

    private fun HandleStopClick(ALittle.UIClickEvent event)
    {
        if (this._loop == null) return;
        this._start_button.disabled = false;
        this._stop_button.DelayDisable();

        if (this._loop != null)
        {
            A_WeakLoopSystem.RemoveUpdater(this._loop);
            this._loop = null;
        }

        this.model.StopTraining();
        this.model.Save(this._model_path);

        this.DispatchEvent(new ALittle.UIChangedEvent());
    }

    private fun UpdateFrame(int frame_time)
    {
        this.model.HandleEvent();

        var has_loss = false;
        while (this.model.HasResult())
        {
            has_loss = true;
            var loss = this.model.GetLoss();
            var right = this.model.GetRight();
            this._stat.AddValue(loss, right);
        }

        if (has_loss)
        {
            this._total_train_count_text.text = this.model.GetTotalTrainCount();
            this._cur_train_count_text.text = this.model.GetCurTrainCount();
            this._train_round_text.text = this.model.GetTrainRound();
            this._cur_right_count_text.text = this.model.GetCurRightCount();
            this._loss_average_text.text = ALittle.Math_Floor(this._stat.GetAverageValue() * 10000) / 10000;
        }
    }
}
